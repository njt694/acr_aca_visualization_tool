#! /usr/bin/env python
"""
Program used to build pie charts from taxonomy file generated by parse_genbank_file.py
Should be called as follows:
python make_pie.py file_containing_taxonomy.delimited_taxonomy.txt integer_level_to_display integer_level_to_display ...
Notes:
    Can add as many 'integer_level_to_display's as you want
    integer_level_to_display should be an integer between 1 and 7 (1=Kingdom, 2=Phylum, ..., 7=Species)
"""

from sys import argv
import matplotlib.pyplot as plt
import numpy
import re


max_depth = 6
min_depth = 0
phylo_list = [{},{},{},{},{},{},{}]

tax_file = argv[1]
levels = argv[2:]

f = open(tax_file, "r")
lines = [line.rstrip().split() for line in f]
f.close()

# Get rid of unwanted labels, may have to modify else statement to get rid of any more formatting issues you run into.
for j in range(len(lines)):
    flag = None
    line = lines[j]
    for i in range(len(line)):
        if 'unclassified' in line[i]:
            flag = (j, i)
        elif '/' in line[i]:
            flag = (j, i)
        else:
            regex = re.compile('[^a-zA-Z. ]')
            regex2 = re.compile('[_]')
            line[i] = regex2.sub(' ', line[i])
            line[i] = regex.sub('', line[i])
            if len(line[i].split(' ')) > 1:
                line[i] = line[i].split(' ')[0] + ' ' + line[i].split(' ')[1]

    if flag is not None:
        del line[flag[1]]


for line in lines:
    line_list = line

    # Make each line have 7 items
    if len(line_list) < 7:
        prev_last = line_list[-1]
        last_item_spaces = line_list[-1].replace('_', ' ')
        line_list[-1] = last_item_spaces
        while len(line_list) < 6:
            line_list.append(last_item_spaces)
        line_list.append(prev_last)

    # Check lines for issues
    for item_index in range(len(line_list)):
        if item_index == min_depth:
            if line_list[item_index] != "Bacteria":
                print("ERROR! First item of line should be 'Bacteria', instead found: " + line_list[item_index])
        if item_index + 1 == len(line_list) and item_index != max_depth:
            # case when the full phylogeny isn't present in the line
            exceptionstring = ""
            for item in line_list:
                exceptionstring += item + '\t'
            exceptionstring.rstrip()
            print("This line has less items than the max phylogeny depth, it may cause problems: \n" + exceptionstring)
        if item_index > max_depth:
            exceptionstring = ""
            for item in line_list:
                exceptionstring += item + '\t'
            exceptionstring.rstrip()
            print("ERROR: Line is longer than the maximum phylogeny length (6). Line is: \n" + exceptionstring)

        item = line_list[item_index]

        if item not in phylo_list[item_index].keys():
            try:
                line_list[item_index + 1]
                phylo_list[item_index][item] = 1
            except IndexError:
                # Last item in the line
                genus_species = line_list[item_index]

                if genus_species not in phylo_list[item_index].keys():
                    phylo_list[item_index][genus_species] = 1

                else:
                    phylo_list[item_index][genus_species] += 1
        else:
            phylo_list[item_index][item] += 1


def make_pie(level):
    """
    Draws a pie chart of the distribution of matches from the specified taxonomic level
    :param level: an integer from 1-7, 1=Kingdom, 2=Phylum... 7=species
    :return: None, draws a pie chart
    """
    # Kingdom Phylum Class Order Family Genus Species
    # 1       2      3     4     5      6     7
    if level < 1 or level > 7:
        print("Taxonomic level '"+str(level)+"' out of range")
        return

    if level == 1:
        tax_level = "Kingdom"
    elif level == 2:
        tax_level = "Phylum"
    elif level == 3:
        tax_level = "Class"
    elif level == 4:
        tax_level = "Order"
    elif level == 5:
        tax_level = "Family"
    elif level == 6:
        tax_level = "Genus"
    elif level == 7:
        tax_level = "Species"
    else:
        tax_level = "Error line 122 make_pie.py"

    #title = tax_file.split('.')[0] + ' Taxonomy Distribution at ' + tax_level + ' Level'
    title = tax_level + ' Distribution of \n'+tax_file.split('.')[0]+' PSI-BLAST Matches'

    phylo_level = phylo_list[level-1]
    total = 0
    labels = []
    sizes = []
    for key in phylo_level.keys():
        total += phylo_level[key]
        labels.append(key)
        sizes.append(phylo_level[key])

    percentages = []
    for size in sizes:
        decimalnum = size/total
        percent = decimalnum*100
        percentages.append(str(round(percent, 2)) + '%')

    # Italics for genus and species names
    for i in range(len(labels)):
        if level == 7 or level == 6:
            if ' bacterium' not in labels[i]:
                if len(labels[i].split(' ')) > 1:
                    genus = labels[i].split(' ')[0]
                    species = labels[i].split(' ')[1]
                    if 'p.' in species:
                        labels[i] = f"$\it{genus}$" +' '+ species
                    else:
                        labels[i] = f"$\it{genus}$" +' '+ f"$\it{species}$"
                else:
                    labels[i] = f"$\it{labels[i]}$"
        labels[i] += ' ('+percentages[i]+')'

    #patches, texts = plt.pie(sizes, startangle=90)

    #plttitle = plt.title(title)
    #plttitle.set_ha("left")
    #plt.gca().axis("equal")
    #plt.legend(patches, labels, loc="center right", bbox_to_anchor=(1, 0.5), bbox_transform=plt.gcf().transFigure, title="Total = "+str(total), frameon=False)
    #plt.subplots_adjust(left=0.0, bottom=0.1, right=0.45)

    #plt.axis('equal')

    # Formatting from matplotlib

    plttitle = plt.title(title)
    #plttitle.set_ha("left")
    plt.gca().axis("equal")
    pie = plt.pie(sizes, startangle=90)
    plt.legend(pie[0], labels, bbox_to_anchor=(1,0.5), title="Total = "+str(total), frameon=False, loc='center left')
    plt.subplots_adjust(left=0.0, bottom=0.1, right=0.45)



    #plt.show()
    figname = tax_file.split('.')[0]+'_tax_matches_'+tax_level+'.png'
    plt.savefig(figname, bbox_inches="tight") # Save the plot (doesn't work if plt.show() uncommented)


# Make the pies
for level in levels:
    l = int(level)
    make_pie(l)