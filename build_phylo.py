#! /usr/bin/env python
"""
Program used to build a phylogenetic tree from taxonomy file generated by parse_genbank_file.py

run as: python build_phylo.py path_to/desired_taxonomy_file.txt
"""

from sys import argv

from ete3 import TreeStyle, Tree, TextFace, add_face_to_node, NodeStyle
import basictree as bt
import re

max_depth = 6
min_depth = 0
bacteria_tree = bt.Tree("Bacteria")
filename = argv[1]
filein = open(filename, "r")
italics = []

lines = [line.rstrip().split() for line in filein]
filein.close()

# Clean up labels, get rid of unwanted characters
for j in range(len(lines)):
    flag = None
    line = lines[j]
    for i in range(len(line)):
        if 'unclassified' in line[i]:
            flag = (j, i)
        elif '/' in line[i]:
            flag = (j, i)
        else:
            regex = re.compile('[^a-zA-Z. ]')
            regex2 = re.compile('[_]')
            line[i] = regex2.sub(' ', line[i])
            line[i] = regex.sub('', line[i])
            if len(line[i].split(' ')) > 1:
                line[i] = line[i].split(' ')[0] + ' ' + line[i].split(' ')[1]

    if flag is not None:
        del line[flag[1]]

# Build the tree
for line in lines:
    line_list = line
    for item_index in range(len(line_list)):
        if item_index == min_depth:
            if line_list[item_index] != "Bacteria":
                print("ERROR! First item of line should be 'Bacteria', instead found: " + line_list[item_index])
        if item_index + 1 == len(line_list) and item_index != max_depth:
            # case when the full phylogeny isn't present in the line
            exceptionstring = ""
            for item in line_list:
                exceptionstring += item + '\t'
            exceptionstring.rstrip()
            print("This line has less items than the max phylogeny depth, it may cause problems: \n" + exceptionstring)
        if item_index > max_depth:
            exceptionstring = ""
            for item in line_list:
                exceptionstring += item + '\t'
            exceptionstring.rstrip()
            print("ERROR: Line is longer than the maximum phylogeny length (6). Line is: \n" + exceptionstring)

        item = line_list[item_index]

        # Labels to italicize ('p.' is to avoid italicizing sp. or spp.)
        if item_index == max_depth-1:
            if 'p.' not in item:
                if ' bacterium' not in item:
                    italics.append(item)

        # Building the basictree from basictree.py
        try:
            line_list[item_index + 1]  # Triggers exception if leaf node
            node = bacteria_tree.search(item)
            if node is None:
                node = bacteria_tree.search(line_list[item_index - 1])
                node.add_child(item)

        except IndexError:
            # Last item in the line
            genus_species = item.split(" ")
            genus = genus_species[0]
            species = genus_species[1]

            # italicize species names
            genus_species = genus + " " + species
            if item_index == max_depth:
                if True or 'p.' not in species:
                    if ' bacterium' not in genus_species:
                        if genus_species not in italics:
                            italics.append(genus_species)

            if item_index == max_depth:
                node = bacteria_tree.search(genus_species)
                if node is None:
                    node = bacteria_tree.search(line_list[item_index - 1])
                    node.add_child(genus_species)

            else:
                node = bacteria_tree.search(genus + " " + species)
                if node is None:
                    try:
                        node = bacteria_tree.search(line_list[item_index - 1])
                        node.add_child(genus + " " + species)
                    except:
                        node = bacteria_tree.search(line_list[item_index - 2])
                        node.add_child(genus + " " + species)


# print(phylo_list)
# print(bacteria_tree.to_string_newick())

# Convert the basictree to an ete3 tree
t = Tree(bacteria_tree.to_string_newick(), format=1)

# Formatting for the ete3 tree, see their cookbook for more details
ts = TreeStyle()
ts.show_leaf_name = False


def my_layout(node):
    if node.name in italics:
        F = TextFace(node.name, tight_text=True, fstyle="italic")
        add_face_to_node(F, node, column=0, position="branch-right")

    else:
        F = TextFace(node.name, tight_text=True)
        add_face_to_node(F, node, column=0, position="branch-right")


ts.layout_fn = my_layout
ts.branch_vertical_margin = 33
ts.show_scale = False
ts.title.add_face(TextFace("Phylogenetic Tree of Matches from PSI-BLAST to "+filename.split(".")[0]), column=0)
ts.scale = 100

ns = NodeStyle()
ns["size"] = 0

for n in t.iter_descendants():
    n.img_style = ns

t.img_style = ns

#t.show(tree_style=ts)
outfilename = filename.split(".")[0]+"_matches_phylo_tree.png"
t.render(outfilename, tree_style=ts) # Save the tree (doesn't save a tree if t.show is uncommented)
